/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hold_and_tap: hold_and_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_AND_TAP";
            bindings = <&lt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-preferred";
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 23 21 22 20 19 18 30 31 32 33 34 35 39 40 41>;
            flavor = "balanced";
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 17 16 24 25 26 27 28 29 36 37 38>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        capslock {
            bindings = <&kp CAPS>;
            key-positions = <17 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC    &kp Q            &kp W         &kp E            &kp R  &kp T        &kp Y      &kp U  &kp I             &kp O         &kp P                &kp BSPC
&kp LCTRL  &hml LEFT_ALT A  &hml LCTRL S  &hml LEFT_WIN D  &kp F  &kp G        &kp H      &kp J  &hmr RIGHT_WIN K  &hmr RCTRL L  &hmr RIGHT_ALT SEMI  &hold_and_tap 3 SINGLE_QUOTE
&kp LSHFT  &kp Z            &kp X         &kp C            &kp V  &kp B        &kp N      &kp M  &kp COMMA         &kp DOT       &kp FSLH             &kp RIGHT_SHIFT
                                          &kp LGUI         &mo 1  &kp ENTER    &kp SPACE  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6     &kp N7      &kp N8             &kp N9           &kp N0  &kp BSPC
&kp LCTRL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT   &kp DOWN    &kp UP             &kp RIGHT        &trans  &trans
&kp LSHFT  &trans        &trans        &trans        &trans        &trans          &trans     &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans  &kp RIGHT_SHIFT
                                       &kp LGUI      &trans        &kp RET         &kp SPACE  &trans      &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp RET      &kp SPACE  &trans     &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp F12     &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&bt BT_CLR  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
&trans      &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
                            &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
